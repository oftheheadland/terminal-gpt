#!/usr/bin/env node

const axios = require('axios')
const os = require('os')
const { exec } = require('child_process')
const readline = require('readline')

// Detect the operating system
const platform = os.platform() // 'win32', 'darwin', or 'linux'

// Mapping OS to human-readable names
const osMapping = {
  win32: 'windows',
  darwin: 'mac',
  linux: 'linux',
}

// Function to prompt for user input
function promptUser(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise((resolve) =>
    rl.question(query, (answer) => {
      rl.close()
      resolve(answer)
    })
  )
}

// Function to query ChatGPT
async function queryChatGPT(instruction, apiKey) {
  const osName = osMapping[platform]

  const prompt = `Write a ${osName} shell script that does ${instruction}. Only return the shell script and nothing else. Do not include explanations, comments, or any additional text.
  If you cannot accomplish the task with a shell script, return "404". 
  If you think the task could be dangerous and delete system files, return "dangerous".`

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4', // or 'gpt-3.5-turbo'
        messages: [{ role: 'user', content: prompt }],
      },
      {
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
      }
    )

    const result = response.data.choices[0].message.content.trim()

    // Check if the response is "404" or "dangerous"
    if (result === '404') {
      console.log('Task cannot be accomplished.')
      return
    } else if (result === 'dangerous') {
      console.log('This task is considered dangerous and will not be executed.')
      return
    }

    console.log(`Generated shell script:\n${result}`)

    // Ask the user for confirmation before running the script
    const disclaimer = `\nDisclaimer: This script was generated by a generative text model (LLM). The author of this package is not liable for any lost files or damages caused by running this script.\nDo you want to run this script? (y/n): `
    const confirmation = await promptUser(disclaimer)

    if (confirmation.toLowerCase() === 'y') {
      runShellScript(result)
    } else {
      console.log('Script execution cancelled.')
    }
  } catch (error) {
    console.error('Error querying ChatGPT. Check your API key')
    console.error(error)
  }
}

// Function to execute the shell script
function runShellScript(script) {
  exec(script, (error, stdout, stderr) => {
    if (error) {
      console.error(`Error executing script: ${error.message}`)
      return
    }

    if (stderr) {
      console.error(`Script stderr: ${stderr}`)
      return
    }

    stdout.length > 0 ? console.log(`Script output: ${stdout}`) : console.log('Script completed successfully!')
  })
}

// Main function to prompt for instruction and API key if not provided, then run the query
async function main() {
  const args = process.argv.slice(2) // Get command-line arguments

  let instruction = args[0]
  let apiKey = args[1]

  // Prompt for instruction if not provided
  if (!instruction) {
    instruction = await promptUser('What tedious terminal task are we letting AI handle today? ')
    // "What terminal task would you like to perform?"
  }

  // Prompt for API key if not provided
  if (!apiKey) {
    apiKey = await promptUser('Please enter your OpenAI API key: ')
  }

  if (!apiKey) {
    console.log('API key is required to proceed.')
    return
  }

  console.log(`Your task: ${instruction}`)
  queryChatGPT(instruction, apiKey)
}

main()
